# -*- coding: utf-8 -*-
"""Edu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ibwwpr_hfPPR1Od988EggVbKR8Ng8ZQ5
"""

# -*- coding: utf-8 -*-
"""EduTutorAI Optimized with Textbox Outputs"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
import time
from transformers import AutoTokenizer, AutoModelForCausalLM

# ------------------------------
# Load model and tokenizer
# ------------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ------------------------------
# Core response generator
# ------------------------------
def generate_response(prompt, max_new_tokens=250):
    start_time = time.time()  # measure speed

    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_new_tokens=max_new_tokens,  # cap output size
            do_sample=False,                # faster, deterministic
            repetition_penalty=1.2,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()

    elapsed = round(time.time() - start_time, 2)
    return f"Response Time: {elapsed}s\n\n{response}"

# ------------------------------
# Concept Explanation
# ------------------------------
def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} clearly in simple terms with one or two short examples:"
    return generate_response(prompt, max_new_tokens=200)

# ------------------------------
# Quiz Generator
# ------------------------------
def quiz_generator(concept):
    prompt = f"""Generate exactly 5 quiz questions about {concept}.
Use different types (MCQ, True/False, Short Answer).
At the end, provide an ANSWERS section with correct answers."""
    return generate_response(prompt, max_new_tokens=300)

# ------------------------------
# Gradio Interface
# ------------------------------
with gr.Blocks() as app:
    gr.Markdown("# ðŸ“˜ EduTutorAI - Optimized Educational Assistant")

    with gr.Tabs():
        with gr.TabItem("Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=12, interactive=False)

            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        with gr.TabItem("Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=15, interactive=False)

            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

app.launch(share=True)